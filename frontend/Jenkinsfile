pipeline {
    agent any

    tools {
        jdk 'jdk'
       
    }
    environment{

                    DOCKER_REPO = "kvnikhill"
                    BUILD_NO = "${env.BUILD_ID}"
                }


    stages {
        stage('git checkout') {
            steps {
             checkout scmGit(branches: [[name: '*/main']],
             extensions: [sparseCheckout([[path: 'frontend']])],   // extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path:'frontend']]]],
             userRemoteConfigs: [[url: 'https://github.com/kvnikhildev/Ecommerce-sample1.git']])  
            }
        }

        stage('git install package and lint check ') {
            steps {
                dir('frontend'){
                sh '''
                npm install
                npm run lint || true
                '''
                }
             
            }
        }

         stage('snyk test ') {
            steps {
                dir('frontend'){
                sh '''
                snyk $SNYK_TOKEN
                snyk test || true
                snyk monitor || true 
                '''
                }
             
            }
        }

        stage('sonarqube analysis') {
            steps {
                dir('frontend'){
                withSonarQubeEnv('SonarQube_Server') {
                    sh '''
                            npx sonar-scanner \
                            -Dsonar.projectKey=ecommerce-frontend \
                            -Dsonar.sources=. \
                        '''           
                    }
                }
            }

        }

        stage(' build the app') {
            steps {
                dir('frontend'){
                sh 'npm run build'   // create a dist folder 

                }
             
            }
        }

        stage(' create artifacts ') {
            steps {
                dir('frontend'){
                sh 'tar -czf ecommerce-frontend-artifact.tar.gz dist/'   //compress and copy to the dist folder 
                
                }
             
            }
        }

        stage(' create docker file ') {
              
            steps {
                dir('frontend'){
                sh '''
                docker build -t $DOCKER_REPO/ecommerce-frontend:$BUILD_NO .

                '''
                
                }
             
            }
        }
        stage(' push image to docker hub ') {
            steps {
                dir('frontend'){
                withDockerRegistry(credentialsId: 'DOCKER_REG', url: 'https://index.docker.io/v1/') {
                    sh '''
                        docker push $DOCKER_REPO/ecommerce-frontend:$BUILD_NO
                    '''
                    }

                }
             
            }
        }
        stage(' clone helm repo ') {
              
            steps {

               checkout scmGit(branches: [[name: '*/main']], extensions: [sparseCheckout([[path: 'k8']])], 
               userRemoteConfigs: [[credentialsId: 'jenkin-github', 
               url: 'https://github.com/kvnikhildev/Ecommerce-sample1.git']])
                
                }
             
            }
        stage('update helm repo') {
            steps {
                dir('k8'){
                sh '''
                cd helm-repo/frontend
                sed -i "s/tag:.*/tag: ${BUILD_NO}/" values.yaml            
                '''
                }
             
            }
        }
        stage('push helm changes') {
            steps {
                withCredentials([string(credentialsId: 'GITHUB', variable: 'GIT_SECRET')]) {
                dir('k8'){
                sh '''
                    cd helm-repo/frontend 
                    git config user.email "nikhilkaviledev@gmail.com"
                    git config user.name "kvnikhildev"
                    git commit -m "helm chart"
                    git push origin main             
                '''
                    }
                }
             
            }
        }

    }
}


